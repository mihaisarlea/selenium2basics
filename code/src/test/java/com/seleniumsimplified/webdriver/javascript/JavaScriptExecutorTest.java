package com.seleniumsimplified.webdriver.javascript;

import com.opera.core.systems.scope.exceptions.ResponseNotReceivedException;
import com.opera.core.systems.scope.exceptions.ScopeException;
import com.seleniumsimplified.webdriver.manager.Driver;
import org.hamcrest.Matcher;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.openqa.selenium.*;
import org.openqa.selenium.support.ui.SystemClock;

import java.util.concurrent.TimeUnit;

import static junit.framework.Assert.assertEquals;
import static junit.framework.Assert.assertFalse;
import static junit.framework.Assert.assertTrue;
import static org.hamcrest.core.Is.is;
import static org.junit.Assert.assertThat;

public class JavaScriptExecutorTest {

    private static WebDriver driver;


    @BeforeClass
    public static void setup(){
        driver = Driver.get("http://www.compendiumdev.co.uk/selenium/canvas_basic.html");
    }

    @Before
    public void resetBeforeTest(){

        driver.navigate().refresh();
    }

    @Test
    public void passArgsToTheJavaScript(){

        JavascriptExecutor js =(JavascriptExecutor)driver;

        int actionsCount = driver.findElements(By.cssSelector("#commandlist li")).size();

        if(Driver.currentDriver == Driver.BrowserName.IE){
            // IE for some reason does not run this set of JavaScript under WebDriver
            // this code is just to alert me when it does
            if(actionsCount == 2){
                throw new RuntimeException("IE Now runs the Javascript");
            }
            return;
        }

        assertEquals(2, actionsCount);

        for(int testLoop=0; testLoop < 10; testLoop++){

            js.executeScript("draw(0, arguments[0], arguments[1], 20, arguments[2]);",
                    testLoop*20,
                    testLoop*20,
                    "#" + testLoop + testLoop + "0000");
        }

        actionsCount = driver.findElements(By.cssSelector("#commandlist li")).size();
        assertEquals(12, actionsCount);
    }

    @Test
    public void returnValuesFromJavaScript(){
        JavascriptExecutor js =(JavascriptExecutor)driver;

        assertEquals("Javascript should calc correctly",
                40L,
                js.executeScript(
                        "return (arguments[0]+arguments[1]);",
                        20, 20));
    }

    @Test
    public void returnHardCodedValueFromJavaScript(){
        JavascriptExecutor js =(JavascriptExecutor)driver;

        assertEquals("return 10", 10L, js.executeScript("return 10;"));
    }

    @Test
    public void changeTitleUsingJavascript(){
        JavascriptExecutor js =(JavascriptExecutor)driver;
        assertEquals("Javascript Canvas Example", driver.getTitle());

        js.executeScript("document.title=arguments[0]", "bob");

        assertEquals("bob", driver.getTitle());
    }

    @Test
    public void useJQueryToHideBodyWithNoParams(){
        JavascriptExecutor js =(JavascriptExecutor)driver;
        assertTrue(driver.findElement(By.cssSelector("#commands")).isDisplayed());

        js.executeScript("$('body').hide();");

        assertFalse(driver.findElement(By.cssSelector("#commands")).isDisplayed());
    }

    @Test
    public void hideWebElementAsParam(){

        JavascriptExecutor js =(JavascriptExecutor)driver;
        assertTrue(driver.findElement(By.cssSelector("#commands")).isDisplayed());

        // not all JavaScript execution is created equal
        // Opera hates this and throws an internal error while executing the script
        js.executeScript("$(arguments[0]).hide();", driver.findElement(By.cssSelector("#commands")));


        assertFalse(driver.findElement(By.cssSelector("#commands")).isDisplayed());
    }

    @Test
    public void javascriptRunsAsAnAnonymousFunctionButWeCanLeaveSomeBehind(){

        // only firefox handles alerts generated by the test script
        // IE Blocks
        // Chrome throws an UnhandledAlertException
        // Opera just hates alerts
        if(Driver.currentDriver != Driver.BrowserName.FIREFOX)
            return;

        JavascriptExecutor js =(JavascriptExecutor)driver;

        // this code run as an anonymous function with no trace left
        js.executeScript("alert('alert triggered by webdriver');");

        assertThat(driver.switchTo().alert().getText(), is("alert triggered by webdriver"));
        driver.switchTo().alert().accept();

        // this code creates a function that will persist as we have added it to the global window
        js.executeScript("window.webdriveralert = function(){alert('stored alert triggered by webdriver');};"+
                    "window.webdriveralert.call();");

        assertThat(driver.switchTo().alert().getText(), is("stored alert triggered by webdriver"));
        driver.switchTo().alert().accept();

        // this can only work if we managed to leave javascript lying around
        js.executeScript("window.webdriveralert.call();");

        assertThat(driver.switchTo().alert().getText(), is("stored alert triggered by webdriver"));
        driver.switchTo().alert().accept();
    }

    @Test
    public void javascriptRunsAsAnAnonymousFunctionButWeCanLeaveSomeBehindOtherBrowsers(){
        JavascriptExecutor js =(JavascriptExecutor)driver;

        // In this example I'm not using alerts, I'm using title
        // this code run as an anonymous function with no trace left
        js.executeScript("document.title='title changed by webdriver';");

        assertThat(driver.getTitle(), is("title changed by webdriver"));


        // this code creates a function that will persist as we have added it to the global window
        js.executeScript("window.webdrivertitlechange = function(){document.title='stored title changed by webdriver';};"+
                         "window.webdrivertitlechange.call();");

        assertThat(driver.getTitle(), is("stored title changed by webdriver"));

        // this can only work if we managed to leave javascript lying around
        js.executeScript("document.title='title changed by webdriver';");

        js.executeScript("window.webdrivertitlechange.call();");

        assertThat(driver.getTitle(), is("stored title changed by webdriver"));
    }


    /**
     * Opera has problems with the JavaScript in here, there are intermittent issues running the tests
     * Sometimes a scopeException error, sometimes a NullPointer.
     *
     * I found that when I wrap the offending lines of code in a try catch block, that another test would fail instead
     * So the execution of the javascript was intermittent and could not be coded around.
     */
}
